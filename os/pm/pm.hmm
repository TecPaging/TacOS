/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2023 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * pm/pm.hmm : pm.cmm の外部インタフェース
 *
 * 2020.08.15 : sleep システムコールを kernel に移動（削除）
 * 2019.11.18 : exec システムコールに envp 引数を追加
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2016.01.02 : sleep システムコールを追加
 * 2015.06.26 : exec のパラメータを追加(argc、argv)
 * 2015.04.30 : wait システムコールを実装
 * 2015.04.27 : exit システムコールを実装
 * 2015.04.24 : exec システムコールを実装
 * 2015.02.11 : 村田開発開始
 *
 * $Id$
 *
 */

public int pmLink;
public void pmMain();

/*-----------------------------------------------------------------------------
 * ページテーブルの構造に関係する定数やマクロ
 */
#define DBIT 0x0800                                     // Dirty(D)ビット
#define RBIT 0x1000                                     // Reference(R)ビット
#define SBIT 0x2000                                     // Sticky(S)ビット
#define VBIT 0x8000                                     // Valid(V)ビット
#define RDBIT 0x0400                                    // Readビット
#define WTBIT 0x0200                                    // Writeビット
#define EXBIT 0x0100                                    // Executeビット
#define TEXTBITS 0x0500                                 // TEXTの保護ビット
#define DATABITS 0x0600                                 // TEXT以外の保護ビット
#define FBITS 0x00ff                                    // Frame番号

/*----------------------------------------------------------------------------
 *   名前   : pmInit
 *   戻り値 : なし
 *   引数   : なし
 *   解説   : _memSizにmmのヒープ領域とpmのフレームプール領域の境界を設定する
 */
public void pmInit();

/*----------------------------------------------------------------------------
 *   名前   : peekS
 *   戻り値 : char[]  文字列配列
 *   引数   : int vAdr   文字列が格納されている仮想アドレス
 *          : PCB pcb   現在のPCB
 *   解説   : 仮想アドレスの場所にある文字列を配列に入れて返す
 */
public char[] peekS(int vAdr);

/*----------------------------------------------------------------------------
 *   名前   : peekM
 *   戻り値 : int  結果
 *   引数   : int vAdr  書き込みたい値が入っている仮想アドレス
 *          : void[] pAdr  値を書き込みたい場所の物理アドレス
 *          : int size  書き込みたい値のサイズ
 *   解説   : 仮想アドレスのデータをサイズ分物理アドレスにコピーする
 */
public int peekM(int vAdr, void[] pAdr, int size);

/*----------------------------------------------------------------------------
 *   名前   : pokeM
 *   戻り値 : int  結果
 *   引数   : int vAdr  値を書き込みたい場所の仮想アドレス
 *          : void[] pAdr  書き込みたい値が入っている物理アドレス
 *          : int size  書き込みたい値のサイズ
 *   解説   : 物理アドレスのデータをサイズ分仮想アドレスにコピーする
 */
public int pokeM(int vAdr, void[] pAdr, int size);

/*----------------------------------------------------------------------------
 *   名前   : load
 *   戻り値 : int 仮想アドレスに対応する物理アドレス
 *   引数   : int vAdr ページの仮想アドレス
 *   解説   : ページをフレームにswap-inし解放禁止にする
 */
public int load(int vAdr);

/*----------------------------------------------------------------------------
 *   名前   : release
 *   戻り値 : 0
 *   引数   : int vAdr  ページの仮想アドレス
 *   解説   : ページの解放を許可する
 */
public int release(int vAdr);

/*----------------------------------------------------------------------------
 *   名前   : exec
 *   戻り値 : int プロセス番号(pid)
 *   引数   : char[] path   生成するプロセスの元になるプログラムの名前
 *          : void [] argv  生成したプロセスに与えるコマンドライン引数
 *   解説   : microSD から EXE プログラムを探しプロセスを生成する。
 */
public int exec(char[] path, char[][] argv, char[][] envp);

/*----------------------------------------------------------------------------
 *    名前   : exit
 *    戻り値 : なし
 *    引数   : int　終了ステータス
 *    解説   : 呼び出しプロセスを終了する。
 */
public void exit(int status);

/*----------------------------------------------------------------------------
 *   名前   : wait
 *   戻り値 : int　 子プロセスの PID
 *   引数   : int[] 子プロセスのリターンコードが格納されるint配列
 *                  wait 実行前に呼び出し側で用意して引数として渡す。
 *   解説   : 子プロセスが終了するのを待つ。
 */
public int wait(int[] sta);
