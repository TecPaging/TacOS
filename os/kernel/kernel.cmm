/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2023 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * kernel/kernel.cmm : マイクロカーネル
 *
 * 2022.07.04 : TaC-CPU V3 対応開始
 * 2020.09.06 : exit， wait の内部処理を pm へ移動（削除）
                delProc，iSemV を public に (pm が使用)
 * 2020.09.06 : サーバプロセスの初期化を regProc.cmm に分離
 * 2020.08.15 : 組み込み版に対応
 * 2020.08.15 : sleep システムコールを pm から移動（追加）
 * 2019.12.27 : メモリ保護を追加
 * 2019.11.18 : errno.hmm をインクルードするように変更
 * 2019.10.09 : ttyの非サーバ化に伴い、TTYのプロセス作成部分を削除
 * 2019.08.30 : main() で sioInit() と semInit() の順番を訂正（バグ）
 * 2019.06.13 : VGA, PS2を削除
 * 2019.01.27 : I/O特権モード導入に伴い実行モードの判定方法を変更
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2017.12.27 : newLink() のコメントを修正
 * 2017.12.25 : sndrec() で割込み禁止区間を縮小
 * 2017.12.22 : send(), receive()の不要なsetPri()を削除
 * 2017.12.08 : P_SLEEP を P_WAIT に変更
 * 2017.12.07 : freeSem()のコメントになっていたsetPri()を削除
 * 2017.12.05 : Sem構造体からinUseを削除
 * 2017.10.27 : 関数名変更(dispatch() -> yield(), startProc() -> dispatch())
 * 2016.01.19 : 例外発生時に、ユーザモード中だったかのチェックを修正
 * 2016.01.06 : ソース、コメントの体裁を整える
 * 2015.11.17 : newProc() でFDSの登録を追加、カーネルプロセスのFDS確保を追加
 * 2015.11.16 : zmbProc() で親プロセスが wait していたら起こすように改良
 * 2015.09.06 : curProc, readyQueue を外部 C-- プログラムへ公開
 *              retChildPcb() を waitChild() に変更
 *              子供プロセスを探すだけでなく evtSem で待つように変更
 *              tmrCnt, tmrSem を evtCnt, evtSem に名称変更
 *              tmrRst() を廃止し処理を zmbProc() に移す(重村)
 * 2015.09.05 : newProc( はプロセスを初期化するだけで schProc() しない
 *                PMの必要な処理が終了してから実行開始すべき
 *              parentToInit() を廃止、同様の処理を zmbProc() 内で行う(重村)
 * 2015.09.04 : sndrec()が LINK にクライアントの PCB を記録するように変更
 *              sndrec() の改良により getSem() が不要になったので削除
 *              PCB に idx を追加
 *              zmbProc() を追加、delProcEnt() の引数を pid から PCB に変更
 *              delProc() を private に戻す、getPid() 追加(重村)
 * 2015.09.03 : スリープタイマー用のカウンタ、セマフォを PCB に移動
 *              freeSem()を追加, receive()が LINK を返すように変更(重村)
 * 2015.09.02 : ソースコードを清書(重村)
 * 2015.08.20 : デバッグ用ルーチンを #ifdef DEBUG で囲むように変更
 * 2015.05.27 : sleep()内において、tmrSem を PID ではなく procTbl の index で
 *              決めるように変更
 * 2015.05.26 : regProcTbl()において、pid の通し番号の循環を廃止
 *              （単純に1ずつ加算する）
 * 2015.05.22 : retChildCode() を retChildPcb() に変更、delProcEnt() を追加
 * 2015.04.30 : ゾンビ状態の子プロセスのリターンコードと PID を返すために
 *              retChildCode() を追加
 * 2015.04.27 : プロセス終了時にタイマーをリセットするために tmrRst() を追加
 *              親プロセス終了時に子の親を INIT に変更する parntToInit() 追加　
 * 2015.04.24 : delProc() を public 宣言に変更(exit ルーチンから呼び出すため)
 * 2015.03.24 : newProc() の引数からスタックサイズを削除,
 *              PID を通し番号で管理するように変更
 * 2015.03.23 : IPC 修正(sndrec() のクライアントのブロックの2箇所目では
 *              queue の先頭に追加）
 * 2015.03.17 : newProc() の引数を追加（USP の初期値と FLAG の初期値）
 * 2015.02.25 : プロセス毎にオープンできるファイル数に関する制御を追加
 * 2015.02.12 : プロセステーブルを用いてプロセス管理するように変更
 * 2015.02.11 : PM に関する処理を追加
 * 2014.06.10 : IPC 修正(receive() はリンクのコピーではなく、リンク番号を返す),
 *              getLink() 追加
 * 2014.05.26 : newProc() 変更, IPC 変更
 * 2014.05.19 : IPC に関する部分(link の生成, send(), receive())を追加
 * 2014.05.12 : process.h のインクルードを karnel.h に移動　
 * 2014.05.08 : malloc を使用しないように、newProc() と newSem() の改良
 * 2014.05.07 : 村田開発開始
 * 2013.03.05 : CPU レジスタの初期化で G0,G1,G2 を省略しないように変更
 * 2013.01.08 : setPri の引数を記号定数に変更
 * 2013.01.05 : 特権モードに対応(setPri の引数)
 * 2011.05.20 : 新規作成
 *
 * $Id$
 */

// コンテキスト : PSW と CPU レジスタ
// PSW          : FLAG と PC
// 1ワード      : 16bit
// クリティカルセクションは setPri() で囲む
// プロセス間通信(IPC)をリンクで実現

#include <errno.hmm>
#include <util.hmm>
#include "dispatcher.hmm"
#include "trap.hmm"
#include "regProc.hmm"
#include "kernel.hmm"

#ifndef EMBEDDED
#include <mm.hmm>
#include <tty.hmm>
#include <pm.hmm>                                   // exit が必要
#endif

//-----------------------------------------------------------------------------
// カーネルデータ
//-----------------------------------------------------------------------------
public PCB[] procTbl=array(PRC_MAX);                // プロセスの一覧表
public PCB curProc=null;                            // 実行中プロセス
public PCB readyQueue=null;                         // 実行可能列

//-----------------------------------------------------------------------------
// カーネル内で使用する基本的なサブルーチン(kenel.cmm 内部専用 : private)
//-----------------------------------------------------------------------------
// プロセスキューでp1の前にp2を挿入する  p2 -> p1
void insProc(PCB p1, PCB p2) {
  p2.next=p1;
  p2.prev=p1.prev;
  p1.prev=p2;
  p2.prev.next=p2;
}

// プロセスキュー(実行可能列やセマフォの待ち行列)で p を削除する
public void delProc(PCB p) {
  p.prev.next=p.next;
  p.next.prev=p.prev;
}

// プロセススケジューラ：プロセスを優先度順で readyQueue に登録する
// (カーネル外部からも呼び出されるのでここで割込み禁止にする)
public void schProc(PCB proc) {
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル
  int enice = proc.enice;
  PCB head = readyQueue.next;                       // 実行可能列から
  while (head.enice<=enice)                         //   優先度がより低い
    head = head.next;                               //     プロセスを探す
  insProc(head,proc);                               // 見つけたプロセスの
  setPri(r);                                        //   直前に挿入する
}                                                   // 割り込み状態を復元する

//----------------------------------------------------------------------------
// セマフォ管理
//----------------------------------------------------------------------------
Sem[] semTbl=array(SEM_MAX);                        // セマフォの一覧表
boolean[] semInUse=array(SEM_MAX);                  // 使用中セマフォの一覧表

// セマフォの割当て
public int newSem(int init) {
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル
  for (int i=0; i<SEM_MAX; i=i+1) {                 // 全てのセマフォについて
    if (!semInUse[i]) {                             //   未使用のものを見つけた
      semInUse[i] = true;                           //     使用中に変更し
      semTbl[i].cnt = init;                         //     カウンタを初期化し
      setPri(r);                                    //     割込み状態を復元し
      return i;                                     //     セマフォ番号を返す
    }
  }
  panic("newSem");                                  // 未使用が見つからなかった
  return -1;                                        // ここは実行されない
}

// セマフォの解放
// (書き込み1回で仕事が終わるので割込み許可でも大丈夫)
public void freeSem(int s) {
  semInUse[s] = false;                              // 未使用に変更
}

// セマフォの P 操作
//   カウンタの値 > 0 : カウンタから1減らす
//   カウンタの値 = 0 : 現在実行中のプロセスを実行可能列から外し、
//                      待ち状態にしてセマフォの待ち行列に登録し、
//　  　　　　             ディスパッチャを呼び出す
public void semP(int sd) {
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル
  if (sd<0 || SEM_MAX<=sd || !semInUse[sd])         // 不正なセマフォ番号
    panic("semP(%d)", sd);

  Sem s = semTbl[sd];
  if(s.cnt>0) {                                     // カウンタから引けるなら
    s.cnt = s.cnt - 1;                              //   カウンタから引く
  } else {                                          // カウンタから引けないなら
    delProc(curProc);                               //   実行可能列から外し
    curProc.stat = P_WAIT;                          //   待ち状態に変更する
    insProc(s.queue,curProc);                       //   セマフォの行列に登録
    yield();                                        //   CPUを解放し
  }                                                 //     他プロセスに切換える
  setPri(r);                                        // 割り込み状態を復元する
}

// ディスパッチを発生しないセマフォのV操作
// (V 操作をしたあとまだ仕事があるとき使用する)
// (kernel 内部専用、割込み禁止で呼出す)
public boolean iSemV(int sd) {
  if (sd<0 || SEM_MAX<=sd || !semInUse[sd]) {       // 不正なセマフォ番号
    panic("iSemV(%d)", sd);
  }
  boolean ret = false;                              // 起床するプロセスなし
  Sem s = semTbl[sd];                               // 操作するセマフォ
  PCB q = s.queue;                                  // 待ち行列の番兵
  PCB p = q.next;                                   // 待ち行列の先頭プロセス
  if(p==q) {                                        // 待ちプロセスが無いなら
    s.cnt = s.cnt + 1;                              //   カウンタを足す
  } else {                                          // 待ちプロセスがあるなら
    delProc(p);                                     //   待ち行列から外す
    p.stat = P_RUN;                                 //   実行可能に変更
    schProc(p);                                     //   実行可能列に登録
    ret = true;                                     //  起床するプロセスあり
  }
  return ret;                                       // 実行可能列に変化があった
}

// セマフォの V 操作
//   待ちプロセス無し : カウンタを1増やす
//   待ちプロセス有り : 待ち行列からプロセスを1つ外して実行可能にした後、
//                      ディスパッチャを呼び出す
public void semV(int sd) {
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル
  if (iSemV(sd)) {                                  // V 操作し必要なら
    yield();                                        //   プロセスを切り替える
  }
  setPri(r);                                        // 割り込み状態を復元する
}

//----------------------------------------------------------------------------
// セマフォ初期化
//----------------------------------------------------------------------------
char[][] semMem  = array(SEM_MAX, sizeof(Sem));     // セマフォの領域
char[][] semWaitP= array(SEM_MAX, sizeof(PCB));     // セマフォの待ち行列の番兵

void semInit() {
  for (int i=0; i<SEM_MAX; i=i+1) {
    PCB p = _AtoA(semWaitP[i]);                     // セマフォ待ち行列の番兵
    p.pid = -1;                                     // 番兵はプロセスではない
    p.next = p.prev = p;                            // 重連結環状リストにする

    Sem s = _AtoA(semMem[i]);                       // セマフォ本体(静的に確保)
    s.queue = p;                                    // 番兵を登録
    semTbl[i] = s;                                  // 一覧にセマフォを登録
  }
}

//-----------------------------------------------------------------------------
// プロセス管理
//-----------------------------------------------------------------------------
// 呼び出したプロセスの PID を返す
public int getPid() {
  return curProc.pid;
}

// プロセス番号決定する
int lastPid = -1;                                   // 現在の最新 PID

int nextPid() {
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル
  int pid = lastPid;                                // PID 候補
  boolean flg = true;                               // PID 重複チェック用フラグ

  while (flg) {                                     //
    pid = pid + 1;                                  // 新しい PID 候補
    if (pid<0) pid = 0;                             // Overflow したら 0 に戻す
    flg = false;                                    // 重複は無いだろう
    for (int i=0; i<PRC_MAX; i=i+1) {
      PCB p = procTbl[i];                           // 全プロセスについて
      if (p!=null && p.pid==pid) {                  //   PID の重複チェック
        flg = true;                                 //     重複があった
        break;
      }
    }
  }
                                                    // 割込禁止のうちに
  lastPid = pid;                                    //   決定した PID を書込む
  setPri(r);                                        // 割り込み状態を復元する
  return pid;
}

// PCB をプロセス一覧表に登録する
int regProcTbl(PCB pcb) {
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル
  for (int i=0; i<PRC_MAX; i=i+1) {                 // 全エントリについて
    if (procTbl[i]==null) {                         //   空きエントリがあれば
      procTbl[i] = pcb;                             //     PCB を登録する
      setPri(r);                                    // 割り込み状態を復元する
      return i;                                     // 登録場所を返す
    }
  }
  panic("regProcTbl");                              // プロセスが多すぎる
  return -1;                                        // ここは実行されない
}

// カーネルスタックを初期化する
int newStk(int sp, int start, int flag, int usp) {
  sp = sp - 32;                                     // 以下で 16Word 書込むので
  int[] STK = _ItoA(sp);                            // スタックトップアドレス
  STK[15] = start;                                  // PC       の初期値
  STK[14] = flag;                                   // FLAG     の初期値
  STK[13] = 0x0000;                                 // G0       の初期値
  STK[12] = 0x0000;                                 // G1       の初期値
  STK[11] = 0x0000;                                 // G2       の初期値
  STK[10] = 0x0000;                                 // G3       の初期値
  STK[9]  = 0x0000;                                 // G4       の初期値
  STK[8]  = 0x0000;                                 // G5       の初期値
  STK[7]  = 0x0000;                                 // G6       の初期値
  STK[6]  = 0x0000;                                 // G7       の初期値
  STK[5]  = 0x0000;                                 // G8       の初期値
  STK[4]  = 0x0000;                                 // G9       の初期値
  STK[3]  = 0x0000;                                 // G10      の初期値
  STK[2]  = 0x0000;                                 // G11      の初期値
  STK[1]  = 0x0000;                                 // G12(FP)  の初期値
  STK[0]  = usp;                                    // G14(USP) の初期値
  return sp;
}

// 予め領域を確保された PCB を受け取り、PCB とカーネルスタックを初期化する
public void newProc(int start,int nice,int usp,int flag,PCB pcb,int[] fds) {
  int pid = nextPid();                              // PID を決定する

#ifdef DEBUG
  printF("newProc(start=%04x,nice=%d,usp=%04x,flag=%04x,pid=%d)\n",
         start, nice, usp, flag, pid);
#endif

  int idx = regProcTbl(pcb);                        // PCB を一覧に登録する
  // カーネルスタックポインタ(SP)の決定とカーネルスタックの初期化
  int sp=_AtoI(pcb) + (sizeof(PCB)+P_KERN_STKSIZ+1)&~1; // スタック底のアドレス
  sp = newStk(sp, start, flag, usp);                // スタックに初期値を書込む
  // PCB を初期化する
  pcb.sp       = sp;                                // SP の初期値
  pcb.pid      = pid;                               // PID
  pcb.stat     = P_RUN;                             // 実行可能
  pcb.nice     = nice;                              // 本来優先度
  pcb.enice    = nice;                              // 実質優先度
  pcb.idx      = idx;                               // 一覧表で登録位置
  pcb.evtCnt   = 0;                                 // タイマー停止中
  pcb.evtSem   = newSem(0);                         // タイマー用のセマフォ
  if (fds!=null) {                                  // オープンファイル一覧が
    for (int i=0; i<P_FILE_MAX; i=i+1)              //   あるなら
      fds[i]   = -1;                                //     初期化する
  }
  pcb.fds      = fds;                               // オープンファイル一覧登録
  pcb.prev     = null;                              // 列で前の PCB
  pcb.next     = null;                              // 列で次の PCB
  pcb.magic    = P_MAGIC;                           // マジック番号
}

//-----------------------------------------------------------------------------
// プロセス関連初期化 : readyQueue の初期化、カーネルプロセスの初期化
//-----------------------------------------------------------------------------
// カーネルプロセスの PCB とスタック領域を定義
char[] sentnel = array(sizeof(PCB));                // redyQueue の番兵領域
char[] idleMem = array(sizeof(PCB)+P_KERN_STKSIZ);  // IDLE の PCBとスタック領域

// アイドルプロセス
void idle() {                                       // アイドルループ
  while (true)
    ;
}

// readyQueue を初期化し、カーネルプロセスを初期化・登録する
void procInit() {
  // readyQueue の初期化
  readyQueue=_AtoA(sentnel);                        // readyQueue に番兵を登録
  readyQueue.next=readyQueue.prev=readyQueue;
  readyQueue.pid=-1;                                // 番兵はプロセスではない
  readyQueue.nice=readyQueue.enice=P_LOW_PRI+2;     // 通常未使用の低優先度

  newProc(addrof(idle),P_LOW_PRI+1,0,EI|KERN,       // IDLE プロセスを登録する
          _AtoA(idleMem),null);
  schProc(_AtoA(idleMem));

  regProc();                                        // サーバプロセスを登録する
}

//----------------------------------------------------------------------------
// CPU使用率レベルメータ
//----------------------------------------------------------------------------
int loadLevelMeter;                                 // 負荷レベルメータ
int loadHistory;                                    // 過去160msの履歴

void dispLoadLevel() {                              // レベルメータ処理ルーチン
  int delta = 0;                                    // 表示の変動
  if (curProc!=_AtoA(idleMem)) {                    // プロセス実行中なら
    delta = 1;                                      //   増加する
  }
  if ((loadHistory & 0x8000) != 0) {                // 履歴が消える場合は
    delta = delta - 1;                              //   減少する
  }

  if (delta>0) {
    loadLevelMeter = (loadLevelMeter<<1) | 0x0001;  // レベルメータが伸びる
  } else if (delta<0) {
    loadLevelMeter = (loadLevelMeter>>1) & 0x7fff;  // レベルメータが縮む
  }
  out(0x00f8, loadLevelMeter);                      // データランプに表示する

  loadHistory = loadHistory << 1;                   // 履歴を更新する
  if (curProc!=_AtoA(idleMem)) {                    // プロセス実行中なら
    loadHistory = loadHistory | 0x0001;             //   履歴にビットを立てる
  }
}

//----------------------------------------------------------------------------
// タイマー管理
//----------------------------------------------------------------------------
#define TICK 10                                     // 割り込みは 10ms 単位

// タイマー割り込みハンドラ(10ms 毎に割り込みによって起動される)
interrupt tmrIntr() {
  dispLoadLevel();                                  // レベルメータ処理ルーチン

  // 起きないといけないプロセスを起こしてまわる
  boolean disp = false;                             // ディスパッチの必要性
  for (int i=0; i<PRC_MAX; i=i+1) {
    PCB p = procTbl[i];
    if (p!=null && p.evtCnt>0) {                    // タイマー稼働中なら
      int cnt = p.evtCnt - TICK;                    //   残り時間を計算
      if (cnt<=0) {                                 //   時間が来たら
        cnt = 0;                                    //     タイマーを停止し
        disp = iSemV(p.evtSem) || disp;             //     プロセスを起こす
      }
      p.evtCnt = cnt;
    }
  }

  if (disp) yield();                                // 必要ならディスパッチ
}

// タイマー初期化 : 割り込みベクタとハードウェアを初期化する
void tmrInit() {
  int[] VECTOR = _ItoA(0xffe0);
  VECTOR[0] = addrof(tmrIntr);                      // タイマー0 のベクタ初期化
  out(0x0000, TICK);                                // タイマー0 に周期をセット
  out(0x0002, 0x8001);                              // タイマー0 スタート
}

// タイマーを起動しブロックする
public int sleep(int ms) {                          // 指定時間(ms)
  if (ms<0) return EINVAL;                          // 負の時間はまずい
  curProc.evtCnt = ms;                              // タイマーを起動し
  if (ms>0) semP(curProc.evtSem);                   // プロセスをブロック
  return 0;
}

//----------------------------------------------------------------------------
// プロセス間通信(IPC)
//----------------------------------------------------------------------------
Link[] linkTbl = array(LINK_MAX);                   // リンクの一覧表
int linkID = -1;                                    // リンクの通し番号

// リンクを生成する（サーバが実行する）
public int newLink() {
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル
  linkID = linkID + 1;                              // 通し番号を進める
#ifdef DEBUG
  printF("newLink:linkid=%d,pid=%d\n",linkID,curProc.pid);
#endif
  if (linkID >= LINK_MAX)                           // リンクが多すぎる
    panic("newLink");

  Link l = linkTbl[linkID];                         // 新しく割り当てるリンク
  l.server = curProc;                               // リンクの所有者を記憶
  l.s1 = newSem(0);                                 // server が受信待ちに使用
  l.s2 = newSem(1);                                 // client が相互排他に使用
  l.s3 = newSem(0);                                 // client が返信待ちに使用
  setPri(r);                                        // 割り込み復元
  return linkID;                                    // 割当てたリンクの番号
}

// サーバ用の待ち受けルーチン
public Link receive(int num) {
  Link l = linkTbl[num];
  if (l.server != curProc) panic("receive");        // 登録されたサーバではない
  semP(l.s1);                                       // サーバをブロック
  return l;
}

// サーバ用の送信ルーチン
public void send(int num, int res) {
  Link l = linkTbl[num];
  if (l.server != curProc) panic("send");           // 登録されたサーバではない
  l.op = res;                                       // 処理結果を書込む
  semV(l.s3);                                       // クライアントを起こす
}

// クライアント用メッセージ送受信ルーチン
public int sndrec(int num, int op, int prm1, int prm2, int prm3) {
  Link l = linkTbl[num];                            // 他のクライアントと相互
  semP(l.s2);                                       //   排除しリンクを確保
  l.client = curProc;                               // リンク使用中プロセス記録
  l.op = op;                                        // メッセージを書込む
  l.prm1 = prm1;
  l.prm2 = prm2;
  l.prm3 = prm3;
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル
  iSemV(l.s1);                                      // サーバを起こす
  semP(l.s3);                                       // 返信があるまでブロック
  setPri(r);                                        // 割り込み復元
  int res = l.op;                                   // 返信を取り出す
  semV(l.s2);                                       // リンクを解放
  return res;
}

// リンク初期化 : リンクの一覧表を初期化する
char [][] linkMem = array(LINK_MAX,sizeof(Link));   // リンクの領域
void lnkInit() {
  for (int i=0; i<LINK_MAX; i=i+1)
    linkTbl[i] = _AtoA(linkMem[i]);                 // 一覧表にリンクを登録
}

//----------------------------------------------------------------------------
// 例外処理ルーチン
//----------------------------------------------------------------------------
//       stack
// fp -> fp     0, 1      例外前のFP
//       g2     2, 3      例外前のG2
//       g1     4, 5      例外前のG1
//       g0     6, 7      例外前のG0
//       flag   8, 9      例外前のFLAG
//       pc    10,11      例外前のPC
#define isUser() ((ord(MEM[_fp()+9])&KERN)==0)      // 例外前はユーザモード
#define pc()     WMEM[(_fp()+10)/2]                 // 例外前のPC

// 例外がユーザモードで発生したならユーザプロセスを終了させる
// カーネルモードで発生したならカーネルのバグなので panic()
void exception(int errno, char[] msg) {
#ifdef DEBUG
  panic("exception(errno=%d,\"%s\",pc=%04x)\n", errno, msg, pc());
#else
#ifndef EMBEDDED
  if (isUser()) exit(errno);
  else          panic(msg);
#else
  panic(msg);
#endif
#endif
}

// メモリ保護違反
interrupt memVio() {
#ifdef DEBUG
  printF("### IO[a2h]=%04x,IO[a4h]=%02x ###\n", in(0xa2), in(0xa4));
#endif
  exception(EMEMVIO, "memVio");
}

// ゼロ割算
interrupt zeroDiv() {
  exception(EZERODIV, "zeroDiv");
}

// 特権例外
interrupt privVio() {
  exception(EPRIVVIO, "privVio");
}

// 不正命令
interrupt illInst() {
  exception(EILLINST, "illInst");
}

// 例外処理初期化 : ベクタの初期化
void excpInit() {                                   // ベクタにハンドラを登録
  int[] VECTOR =  _ItoA(0xffe0);
  VECTOR[11] = addrof(memVio);
  VECTOR[12] = addrof(zeroDiv);
  VECTOR[13] = addrof(privVio);
  VECTOR[14] = addrof(illInst);
#ifndef EMBEDDED
  VECTOR[15] = addrof(svCall);                      // svCall は trap.s に定義
#else
  VECTOR[15] = addrof(illInst);                     // 組み込み版はSVCは使用禁止
#endif
}

//----------------------------------------------------------------------------
// カーネルのメイン
//----------------------------------------------------------------------------
public int tlbPid;
public void main() {
  // 初期化ルーチンの実行
  utilInit();                                       // MEM配列初期化
  excpInit();                                       // 例外処理(ベクタ)初期化
  tmrInit();                                        // タイマー(ベクタ,ハード)
  semInit();                                        // セマフォ(semTbl)初期化
  lnkInit();                                        // リンク(lnkTbl)初期化
#ifndef EMBEDDED
  pmInit();                                         // mmが使用するヒープ領域と
                                                    //  pmのフレームプールの
                                                    //  境界を_memSizに設定する
  ttyInit();                                        // TTY初期化
#endif
  procInit();                                       // プロセス(procTbl)初期化

  // システムスタート
#ifdef DEBUG
  printF("Starting system...\n");
#endif
#ifndef EMBEDDED
  out(0xa2, 0x0001);                                // MMU を有効にする
#endif
  tlbPid = 0;
  dispatch();                                       // プロセス実行開始
  panic("main");                                    // ここは実行されないはず
}
